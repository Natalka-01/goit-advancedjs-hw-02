{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\n\n\n// A function that creates and returns a promise based on delay and state.\nconst createPromise = (delay, state) => {\n  \n  return new Promise((resolve, reject) => {\n    \n    setTimeout(() => {\n      if (state === 'fulfilled') {\n        resolve(delay);\n      } else {\n        reject(delay);\n      }\n    }, delay);\n  });\n};\n\n\n\nconst form = document.querySelector('.form');\n\n\nform.addEventListener('submit', event => {\n  \n  event.preventDefault();\n\n \n  const formData = new FormData(event.currentTarget);\n\n  const delay = Number(formData.get('delay'));\n  const state = formData.get('state');\n\n  const promise = createPromise(delay, state);\n\n\n  promise\n    .then(resultDelay => {\n\n      iziToast.show({\n            message: `✅ Fulfilled promise in ${resultDelay}ms`,\n            color: 'green', \n            position: 'topRight', \n            });\n    })\n    .catch(errorDelay => {\n         iziToast.show({\n            message: `❌ Rejected promise in ${errorDelay}ms`,\n            color: 'red', \n            position: 'topRight', \n            });\n    });\n});"],"names":["createPromise","delay","state","resolve","reject","form","event","formData","resultDelay","iziToast","errorDelay"],"mappings":"+FASA,MAAMA,EAAgB,CAACC,EAAOC,IAErB,IAAI,QAAQ,CAACC,EAASC,IAAW,CAEtC,WAAW,IAAM,CACXF,IAAU,YACZC,EAAQF,CAAK,EAEbG,EAAOH,CAAK,CAEf,EAAEA,CAAK,CACZ,CAAG,EAKGI,EAAO,SAAS,cAAc,OAAO,EAG3CA,EAAK,iBAAiB,SAAUC,GAAS,CAEvCA,EAAM,eAAc,EAGpB,MAAMC,EAAW,IAAI,SAASD,EAAM,aAAa,EAE3CL,EAAQ,OAAOM,EAAS,IAAI,OAAO,CAAC,EACpCL,EAAQK,EAAS,IAAI,OAAO,EAElBP,EAAcC,EAAOC,CAAK,EAIvC,KAAKM,GAAe,CAEnBC,EAAS,KAAK,CACR,QAAS,0BAA0BD,CAAW,KAC9C,MAAO,QACP,SAAU,UACtB,CAAa,CACb,CAAK,EACA,MAAME,GAAc,CAChBD,EAAS,KAAK,CACX,QAAS,yBAAyBC,CAAU,KAC5C,MAAO,MACP,SAAU,UACtB,CAAa,CACb,CAAK,CACL,CAAC"}